import re
from typing import Any, Dict, List

from openai_mobile.client.templates import prompts
from openai_mobile.client.handler import OpenAITaskBaseHandler
from openai_mobile.models.message import MessagePrompt, MessageResponse
from openai_mobile.models.user import UserSession


class ChatReplyHandler(OpenAITaskBaseHandler):
    """
    Handler for the task of generating a reply to a user message.
    """

    def reply(
        self,
        prompt: MessagePrompt,
        chat_history: List[Dict[str, str]],
        user_session: UserSession,
    ) -> None:
        """
        Generates a response to a message prompt and sends it to the user via the
        communication provider.
        """
        self.logger.info(f"Generating answer from user prompt: '{prompt}'")
        txt_answer = self._generate_answer(prompt, chat_history)
        self.logger.info(f"Model generated the answer: '{txt_answer}'")
        parsed_answer = self._parse_model_answer(txt_answer)
        response = MessageResponse(
            body=parsed_answer["response_body"], to_user=prompt.from_user
        )
        self.client.send_response(response)
        self.client.save_response(response, user_session)
        output = {
            "message_response": response,
            "raw": txt_answer,
            "parsed": parsed_answer,
        }
        self.logger.info(f"Sent chat reply with output: '{output}'")
        return output

    def _generate_answer(
        self,
        prompt: MessagePrompt,
        chat_history: List[Dict[str, str]],
    ) -> str:
        """
        Generates a response to a message prompt using the OpenAI API.
        """
        self.logger.debug(
            f"Generating an answer from chat: '{[*chat_history, prompt.to_chat_repr()]}'"
        )
        completion = self.openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": prompts.get_system_role_prompt()},
                *chat_history,
                prompt.to_chat_repr(),
            ],
            user=prompt.from_user.hashed_user_id,
        )
        answer_txt = completion.choices[0].message.content.strip()
        return answer_txt

    def _parse_model_answer(self, answer: str) -> Dict[str, Any]:
        """
        Parses the answer generated by the OpenAI API
        """
        replies = re.findall(r"Reply\((.*?)\)", answer)
        reply = replies[0] if replies else None
        image = self.get_image_prompt_from_answer(answer)
        return {
            "response_body": reply if reply else answer,
            "image": image,
        }

    def get_image_prompt_from_answer(self, answer: str) -> str:
        """
        Returns the image prompt from the answer generated by the OpenAI API
        """
        patterns = [
            r"Image\((.*?)\)",
            r"Image:\s*\(?(.*)\)?",
            r".*?generating.*?image.*?[\r\n]{2,}(.*)",
        ]
        for pattern in patterns:
            matches = re.findall(pattern, answer, flags=re.IGNORECASE)
            if matches:
                return matches[0]
        return None
