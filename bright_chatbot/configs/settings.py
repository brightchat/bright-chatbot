from typing import List, Literal

from bright_chatbot.configs.base import BaseSettings
from bright_chatbot.utils.functional import classproperty
from bright_chatbot.configs.templates import prompts


class ProjectSettings(BaseSettings):
    """
    Main project settings used throughout the application.
    """

    # === General Settings ===

    @classproperty
    def USE_MULTI_THREADING(cls) -> bool:
        """
        If set to true, the application will use multiple threads
        for some operations.
        """
        use_threading = cls.get("USE_MULTI_THREADING", "true")
        return use_threading.lower() == "true"

    # === Admin Users Settings ====

    @classproperty
    def ADMIN_USERS(cls) -> List[str]:
        """
        List of phone numbers of the admin users of the application.
        These users may have special privileges within the application.

        :return: List[str]
        """
        admin_users = cls.get("ADMIN_USERS")
        return admin_users.split(",") if admin_users else []

    @classproperty
    def ADMINS_RATE_LIMITED(cls) -> bool:
        """
        If set to True, admins will be rate limited as well.
        """
        rate_limit_admins = cls.get("ADMINS_RATE_LIMITED", "false")
        return rate_limit_admins.lower() == "true"

    # === Security Settings ===

    @classproperty
    def SECRET_KEY(cls) -> str:
        """
        Secret key used to cryptographically sign sensitive data.

        :return: str
        """
        return cls.get("SECRET_KEY", required=True)

    # === OpenAI API Settings ===

    @classproperty
    def OPENAI_API_KEY(cls) -> str:
        """
        OpenAI API key used to authenticate with the OpenAI API.

        :return: str
        """
        return cls.get("OPENAI_API_KEY", required=True, accept_plain_name=True)

    @classproperty
    def IMAGE_GENERATION_SIZE(cls) -> Literal["small", "medium", "large"]:
        """
        Size of the image generated by the OpenAI API.
        Accepted values: "small", "medium", "large"

        :return: str
        """
        return cls.get("IMAGE_GENERATION_SIZE", "medium")

    # === Rate Limit Settings ===

    @classproperty
    def MAX_REQUESTS_PER_MINUTE(cls) -> int:
        """
        Maximum number of requests allowed per minute.

        Not implemented yet.

        :return: int
        """
        return cls.get("MAX_REQUESTS_PER_MINUTE", 10, cast=int)

    @classproperty
    def MAX_REQUESTS_PER_SESSION(cls) -> int:
        """
        Maximum number of requests allowed per session.

        :return: int
        """
        return cls.get("MAX_REQUESTS_PER_SESSION", 100, cast=int)

    @classproperty
    def MAX_SESSION_DURATION_MINUTES(cls) -> int:
        """
        Maximum duration of a session in minutes.

        :return: int
        """
        return cls.get("MAX_SESSION_DURATION_MINUTES", 180, cast=int)

    @classproperty
    def MAX_SESSIONS_PER_DAY(cls) -> int:
        """
        Maximum number of sessions allowed per user per day.

        :return: int
        """
        return cls.get("MAX_SESSIONS_PER_DAY", 10, cast=int)

    @classproperty
    def MAX_ACTIVE_SESSIONS(cls) -> int:
        """
        Maximum number of active sessions that can exist across all users.

        :return: int
        """
        return cls.get("MAX_ACTIVE_SESSIONS", 100, cast=int)

    # === DynamoDB Backend Settings ===

    @classproperty
    def DYNAMODB_TABLES_PREFIX(cls) -> str:
        """
        Prefix used for all DynamoDB tables names.
        """
        return cls.get("DYNAMODB_TABLES_PREFIX", "")

    # === Twilio Provider Settings ===

    @classproperty
    def TWILIO_PHONE_NUMBER(cls) -> str:
        """
        Phone number of the Twilio account used to send messages.
        """
        return cls.get("TWILIO_PHONE_NUMBER", accept_plain_name=True)

    @classproperty
    def TWILIO_CALLBACK_URL(cls) -> str:
        """
        URL of the Twilio callback endpoint.

        This can be used to verify the signature of a received message.
        """
        return cls.get("TWILIO_CALLBACK_URL", accept_plain_name=True)

    # === Message Templates ===
    @classproperty
    def CHAT_SYSTEM_ROLE_PROMPT(cls) -> str:
        """
        Message template used as the prompt for the chat system role.
        """
        role_prompt = cls.get("CHAT_SYSTEM_ROLE_PROMPT")
        if not role_prompt:
            role_prompt = prompts.CHAT_SYSTEM_ROLE_PROMPT
        return role_prompt

    @classproperty
    def SESSION_STATUS_PROMPT(cls) -> str:
        """
        Message template used as the prompt for the session status
        when the session starts
        """
        session_status_prompt = cls.get("SESSION_STATUS_PROMPT")
        if not session_status_prompt:
            session_status_prompt = prompts.SESSION_STATUS_PROMPT
        return session_status_prompt
