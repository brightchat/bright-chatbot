---
AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description:  Resources for the Chat Bot application of BrightBot

Parameters:
  AppName:
    Type: String
    Default: bright-chatbot
    Description: Name of the Application
  AppEnvironment:
    Type: String
    Default: Staging
    Description: Environment of the Application
    AllowedValues:
      - Staging
      - Production
  WhatsAppBusinessAuthToken:
    Type: String
    Description: Auth token for the WhatsApp Business API
    NoEcho: true
  WhatsAppBusinessPhoneNumberId:
    Type: String
    Description: Phone number Id associated with your WhatsApp Business API account to send messages from.
    NoEcho: true
  WhatsAppBusinessFromPhoneNumber:
    Type: String
    Description: Phone number associated with your WhatsApp Business API account to send messages from.
    NoEcho: true
  AdminEmail:
    Type: String
    Description: Email address of the application's admin user for notifications.
  BotImageGenerationSize:
    Type: String
    Default: small
    Description: Size in which the images are generated by the image generation API.
    AllowedValues: ["small","medium", "large"]
  OpenAIAPIKey:
    Type: String
    Description: API key associated with an OpenAI account.
    NoEcho: true
  BrightChatBotSecretKey:
    Type: String
    Description: A secure secret key for the application.
    NoEcho: true
  StripeApiKey:
    Type: String
    Description: API key used to authenticate to the Stripe API
    NoEcho: true
  SessionsExpirationMinutes:
    Type: Number
    Description: Number of minutes a user session has until it expires from the time of creation.
    Default: 3
    MinValue: 1
  SessionsQuotaPerUser:
    Type: Number
    Description: |
      Number of sessions that are allowed to be registered in the application per user.
      No more than this number of user sessions (expired or not) can exist at a given time to fulfill the user's request.
    Default: 3
    MinValue: 1
  MessagesQuotaPerUserSession:
    Type: Number
    Description: Number of prompts that an user can request per session.
    Default: 6
    MinValue: 1
  LambdaLogLevel:
    Type: String
    Description: Log level of the Lambda function used as backend of the application.
    Default: WARNING
    AllowedValues:
      - DEBUG
      - INFO
      - WARNING
      - ERROR
      - CRITICAL
  SentryDSN:
    Type: String
    Description: DSN of the Sentry project to send errors to.
    Default: ""
    NoEcho: true
Resources:
  # === DynamoDB Tables ====
  ## --- Application Tables ---
  SessionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub
        - "${AppName}-Sessions"
        - AppName: !Ref AppName
      BillingMode: "PAY_PER_REQUEST"
      AttributeDefinitions:
        - AttributeName: "UserId"
          AttributeType: "S"
        - AttributeName: "TimestampCreated"
          AttributeType: "N"
      KeySchema:
        - AttributeName: "UserId"
          KeyType: "HASH"
        - AttributeName: "TimestampCreated"
          KeyType: "RANGE"
      TimeToLiveSpecification:
        AttributeName: "SessionTTL"
        Enabled: True
      Tags:
        - Key: "managed_by"
          Value: "CloudFormation"
        - Key: "Application"
          Value: !Ref AppName
        - Key: "Environment"
          Value: !Ref AppEnvironment
  ChatsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub
        - "${AppName}-Chats"
        - AppName: !Ref AppName
      BillingMode: "PAY_PER_REQUEST"
      AttributeDefinitions:
        - AttributeName: "SessionId"
          AttributeType: "S"
        - AttributeName: "UserId"
          AttributeType: "S"
        - AttributeName: "TimestampCreated"
          AttributeType: "N"
      KeySchema:
        - AttributeName: "SessionId"
          KeyType: "HASH"
        - AttributeName: "TimestampCreated"
          KeyType: "RANGE"
      GlobalSecondaryIndexes:
        - IndexName: "UserConverationGlobalIndex"
          KeySchema:
            - AttributeName: "UserId"
              KeyType: "HASH"
            - AttributeName: "TimestampCreated"
              KeyType: "RANGE"
          Projection:
            ProjectionType: "ALL"
        - IndexName: "UsersLastMessageGlobalIndex"
          KeySchema:
            - AttributeName: "UserId"
              KeyType: "HASH"
          Projection:
            ProjectionType: "ALL"
      Tags:
        - Key: "managed_by"
          Value: "CloudFormation"
        - Key: "Application"
          Value: !Ref AppName
        - Key: "Environment"
          Value: !Ref AppEnvironment
  ChatMessagesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub
        - "${AppName}-ChatMessages"
        - AppName: !Ref AppName
      BillingMode: "PAY_PER_REQUEST"
      AttributeDefinitions:
        - AttributeName: "SessionId"
          AttributeType: "S"
        - AttributeName: "TimestampCreated"
          AttributeType: "N"
      KeySchema:
        - AttributeName: "SessionId"
          KeyType: "HASH"
        - AttributeName: "TimestampCreated"
          KeyType: "RANGE"
      TimeToLiveSpecification:
        AttributeName: "SessionTTL"
        Enabled: True
      Tags:
        - Key: "managed_by"
          Value: "CloudFormation"
        - Key: "Application"
          Value: !Ref AppName
        - Key: "Environment"
          Value: !Ref AppEnvironment
  ImageResponsesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub
        - "${AppName}-ImageResponses"
        - AppName: !Ref AppName
      BillingMode: "PAY_PER_REQUEST"
      AttributeDefinitions:
        - AttributeName: "Prompt"
          AttributeType: "S"
        - AttributeName: "TimestampCreated"
          AttributeType: "N"
        - AttributeName: "ImageId"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "ImageId"
          KeyType: "HASH"
      GlobalSecondaryIndexes:
        - IndexName: "PromptGlobalIndex"
          KeySchema:
            - AttributeName: "Prompt"
              KeyType: "HASH"
            - AttributeName: "TimestampCreated"
              KeyType: "RANGE"
          Projection:
            ProjectionType: "ALL"
      Tags:
        - Key: "managed_by"
          Value: "CloudFormation"
        - Key: "Application"
          Value: !Ref AppName
        - Key: "Environment"
          Value: !Ref AppEnvironment
  ## --- Management Tables ---
  UsersReferralCodesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub
        - "${AppName}-UsersReferralCodes"
        - AppName: !Ref AppName
      BillingMode: "PAY_PER_REQUEST"
      AttributeDefinitions:
        - AttributeName: "UserPhoneNumber"
          AttributeType: "S"
        - AttributeName: "ReferralCode"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "UserPhoneNumber"
          KeyType: "HASH"
        - AttributeName: "ReferralCode"
          KeyType: "RANGE"
      GlobalSecondaryIndexes:
        - IndexName: "ReferralCodesIndex"
          KeySchema:
            - AttributeName: "ReferralCode"
              KeyType: "HASH"
          Projection:
            ProjectionType: "KEYS_ONLY"
      Tags:
        - Key: "managed_by"
          Value: "CloudFormation"
        - Key: "Application"
          Value: !Ref AppName
        - Key: "Environment"
          Value: !Ref AppEnvironment
  # === Lambda Function ===
  MessagesQueueDLQ: # Store failed messages in this queue
    Type: AWS::SQS::Queue
    Properties:
      MessageRetentionPeriod: 1209600 # 14 days
      ReceiveMessageWaitTimeSeconds: 10 # Long polling
      VisibilityTimeout: 300
      Tags:
        - Key: "managed_by"
          Value: "CloudFormation"
        - Key: "Application"
          Value: !Ref AppName
        - Key: "Environment"
          Value: !Ref AppEnvironment
  DeadLetterTopic: # Use an SNS Topic as the dead letter queue of the lambda function
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: "Dead Letter Topic"
      TopicName: !Sub
        - "${AppName}-DeadLetterTopic"
        - AppName: !Ref AppName
      Subscription:
        - Endpoint: !Ref AdminEmail
          Protocol: email
        - Endpoint: !GetAtt MessagesQueueDLQ.Arn
          Protocol: sqs
      Tags:
        - Key: "managed_by"
          Value: "CloudFormation"
        - Key: "Application"
          Value: !Ref AppName
        - Key: "Environment"
          Value: !Ref AppEnvironment
  LambdaIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: !Sub "${AppName}-DynamoDBTablesAllowAll"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
                # Give access to all tables that start with the app name:
              - Effect: Allow
                Action: dynamodb:*
                Resource:
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${AppName}-*"
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${AppName}-*/index/*"
        - PolicyName: !Sub "${AppName}-SNSTopicAllowPublish"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              # Allow the lambda function to publish to the SNS Topic
              - Effect: Allow
                Action: sns:Publish
                Resource: !Ref DeadLetterTopic
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaSQSQueueExecutionRole
      Tags:
        - Key: "managed_by"
          Value: "CloudFormation"
        - Key: "Application"
          Value: !Ref AppName
        - Key: "Environment"
          Value: !Ref AppEnvironment
  BackendLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: python3.9
      FunctionName: !Sub
        - "${AppName}-BackendLambdaFunction"
        - AppName: !Ref AppName
      Role: !GetAtt LambdaIAMRole.Arn
      Handler: lambda_handler.lambda_handler
      Description: !Sub
        - "Lambda Function to Handle the callback of a message for the '${AppName}' application"
        - AppName: !Ref AppName
      Tracing: Active
      Timeout: 300
      MemorySize: 512
      PackageType: Zip
      CodeUri: ./package
      ReservedConcurrentExecutions: 10
      Environment:
        Variables:
          SENTRY_DSN: !Ref SentryDSN
          SENTRY_ENVIRONMENT: !Ref AppEnvironment
          WHATSAPP_BUSINESS_AUTH_TOKEN: !Ref WhatsAppBusinessAuthToken
          WHATSAPP_BUSINESS_PHONE_NUMBER_ID: !Ref WhatsAppBusinessPhoneNumberId
          WHATSAPP_BUSINESS_FROM_PHONE_NUMBER : !Ref WhatsAppBusinessFromPhoneNumber
          OPENAI_API_KEY: !Ref OpenAIAPIKey
          LAMBDA_LOG_LEVEL: !Ref LambdaLogLevel
          APP_NAME: !Ref AppName
          BRIGHT_CHATBOT_SECRET_KEY: !Ref BrightChatBotSecretKey
          BRIGHT_CHATBOT_IMAGE_GENERATION_SIZE: !Ref BotImageGenerationSize
          BRIGHT_CHATBOT_MAX_SESSION_DURATION_MINUTES: !Ref SessionsExpirationMinutes
          BRIGHT_CHATBOT_MAX_SESSIONS_PER_DAY: !Ref SessionsQuotaPerUser
          BRIGHT_CHATBOT_MAX_REQUESTS_PER_SESSION: !Ref MessagesQuotaPerUserSession
          BRIGHT_CHATBOT_DYNAMODB_TABLES_PREFIX: !Sub ${AppName}-
          STRIPE_API_KEY: !Ref StripeApiKey
      # Dead letter queue configuration
      DeadLetterQueue:
        Type: SNS
        TargetArn: !Ref DeadLetterTopic
      EventInvokeConfig:
        MaximumEventAgeInSeconds: 180
        MaximumRetryAttempts: 0
      Tags:
        managed_by: "CloudFormation"
        Application: !Ref AppName
        Environment: !Ref AppEnvironment


Outputs:
  ApplicationLambdaFunctionArn:
    Description: "ARN of the Lambda Function that handles the messages sent to the Application"
    Value: !GetAtt BackendLambdaFunction.Arn
