---
AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: OpenAI WhatsApp Bot Resources

Parameters:
  AppName:
    Type: String
    Default: openai-ws-bot
    Description: Name of the Application
  TwilioAuhToken:
    Type: String
    Description: Token used to authenticate to the Twilio API
  TwilioAccountSID:
    Type: String
    Description: Account SID used to authenticate to the Twilio API
  TwilioPhoneNumber:
    Type: String
    Description: "Twilio registered phone number associated with the account used. eg: 'whatsapp:+12345678901'"
  AdminEmail:
    Type: String
    Description: Email address of the application's admin user for notifications.
  BotImageGenerationSize:
    Type: String
    Default: small
    Description: Size in which the images are generated by the image generation API.
    AllowedValues: ["small","medium", "large"]
  OpenAIAPIKey:
    Type: String
    Description: API key associated with an OpenAI account.
  OpenAIMobileSecretKey:
    Type: String
    Description: A secure secret key.
  StripeApiKey:
    Type: String
    Description: API key used to authenticate to the Stripe API
  SessionsExpirationMinutes:
    Type: Number
    Description: Number of minutes a user session has until it expires from the time of creation.
    Default: 3
    MinValue: 1
  SessionsQuotaPerUser:
    Type: Number
    Description: |
      Number of sessions that are allowed to be registered in the application per user.
      No more than this number of user sessions (expired or not) can exist at a given time to fulfill the user's request.
    Default: 3
    MinValue: 1
  MessagesQuotaPerUserSession:
    Type: Number
    Description: Number of prompts that an user can request per session.
    Default: 6
    MinValue: 1
  LambdaLogLevel:
    Type: String
    Description: Log level of the Lambda function used as backend of the application.
    Default: WARNING
    AllowedValues:
      - DEBUG
      - INFO
      - WARNING
      - ERROR
      - CRITICAL
  AppAdminUsers:
    Type: String
    Description: "A comma separated list of strings with the Twilio phone numbers of the application's admin users"
    Default: ""
Resources:
  # === DynamoDB Tables ====
  SessionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub
        - "${AppName}Sessions"
        - AppName: !Ref AppName
      BillingMode: "PAY_PER_REQUEST"
      AttributeDefinitions:
        - AttributeName: "UserId"
          AttributeType: "S"
        - AttributeName: "TimestampCreated"
          AttributeType: "N"
      KeySchema:
        - AttributeName: "UserId"
          KeyType: "HASH"
        - AttributeName: "TimestampCreated"
          KeyType: "RANGE"
      TimeToLiveSpecification:
        AttributeName: "SessionTTL"
        Enabled: True
      Tags:
        - Key: "managed_by"
          Value: "CloudFormation"
        - Key: "Application"
          Value: !Ref AppName
  ChatsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub
        - "${AppName}Chats"
        - AppName: !Ref AppName
      BillingMode: "PAY_PER_REQUEST"
      AttributeDefinitions:
        - AttributeName: "SessionId"
          AttributeType: "S"
        - AttributeName: "UserId"
          AttributeType: "S"
        - AttributeName: "TimestampCreated"
          AttributeType: "N"
      KeySchema:
        - AttributeName: "SessionId"
          KeyType: "HASH"
        - AttributeName: "TimestampCreated"
          KeyType: "RANGE"
      GlobalSecondaryIndexes:
        - IndexName: "UserIdGlobalIndex"
          KeySchema:
            - AttributeName: "UserId"
              KeyType: "HASH"
            - AttributeName: "TimestampCreated"
              KeyType: "RANGE"
          Projection:
            ProjectionType: "ALL"
      Tags:
        - Key: "managed_by"
          Value: "CloudFormation"
        - Key: "Application"
          Value: !Ref AppName
  ImageResponsesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub
        - "${AppName}ImageResponses"
        - AppName: !Ref AppName
      BillingMode: "PAY_PER_REQUEST"
      AttributeDefinitions:
        - AttributeName: "Prompt"
          AttributeType: "S"
        - AttributeName: "TimestampCreated"
          AttributeType: "N"
        - AttributeName: "ImageId"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "ImageId"
          KeyType: "HASH"
      GlobalSecondaryIndexes:
        - IndexName: "PromptGlobalIndex"
          KeySchema:
            - AttributeName: "Prompt"
              KeyType: "HASH"
            - AttributeName: "TimestampCreated"
              KeyType: "RANGE"
          Projection:
            ProjectionType: "ALL"
      Tags:
        - Key: "managed_by"
          Value: "CloudFormation"
        - Key: "Application"
          Value: !Ref AppName
  # ==== API Gateway ====
  BackendApiIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "apigateway.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: !Sub
            - "${AppName}QueueAllowSendMessages"
            - AppName: !Ref AppName
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              # Allow the API Gateway to invoke the Lambda function
              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource: !GetAtt BackendLambdaFunction.Arn
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                  - logs:PutLogEvents
                  - logs:GetLogEvents
                  - logs:FilterLogEvents
                Resource: "*"
      Tags:
        - Key: "managed_by"
          Value: "CloudFormation"
        - Key: "Application"
          Value: !Ref AppName
  DevelopmentBackendApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: dev
      Description: Development stage of the API for the application
      TracingEnabled: True
      DefinitionBody:
        swagger: "2.0"
        info:
          description: "Development stage of the API for the application"
          version: "2022-11-13T12:36:49Z"
          title: !Sub
            - "${AppName} BackendApi"
            - AppName: !Ref AppName
        basePath: "/dev"
        schemes:
        - "https"
        paths:
          /status:
            get:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
                type: "mock"
          /twilio/message:
            post:
              consumes:
              - "application/x-www-form-urlencoded"
              produces:
              - "application/xml"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Content-Type:
                      type: "string"
              x-amazon-apigateway-integration:
                credentials: !GetAtt BackendApiIamRole.Arn
                httpMethod: "POST"
                # Call the Lambda function
                responses:
                  default:
                    statusCode: "200"
                    responseTemplates:
                      application/xml: "<?xml version=\"1.0\" encoding=\"UTF-8\"?><Response/>"
                    contentHandling: "CONVERT_TO_TEXT"
                requestParameters:
                  integration.request.header.Content-Type: "'application/x-www-form-urlencoded'"
                passthroughBehavior: "never"
                type: "aws_proxy"
                uri: !Sub
                  - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations"
                  - LambdaArn: !GetAtt BackendLambdaFunction.Arn
        definitions:
          Empty:
            type: "object"
      Tags:
        managed_by: "CloudFormation"
        application: !Ref AppName
  # === Lambda Function ===
  MessagesQueueDLQ: # Store failed messages in this queue
    Type: AWS::SQS::Queue
    Properties:
      MessageRetentionPeriod: 1209600 # 14 days
      ReceiveMessageWaitTimeSeconds: 10 # Long polling
      VisibilityTimeout: 300
      Tags:
        - Key: "managed_by"
          Value: "CloudFormation"
        - Key: "Application"
          Value: !Ref AppName
  DeadLetterTopic: # Use an SNS Topic as the dead letter queue of the lambda function
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: "Dead Letter Topic"
      TopicName: !Sub
        - "${AppName}DeadLetterTopic"
        - AppName: !Ref AppName
      Subscription:
        - Endpoint: !Ref AdminEmail
          Protocol: email
        - Endpoint: !GetAtt MessagesQueueDLQ.Arn
          Protocol: sqs
      Tags:
        - Key: "managed_by"
          Value: "CloudFormation"
        - Key: "Application"
          Value: !Ref AppName
  LambdaIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: !Sub
            - "${AppName}DynamoDBTablesAllowAll"
            - AppName: !Ref AppName
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: dynamodb:*
                Resource: !GetAtt SessionsTable.Arn
              - Effect: Allow
                Action: dynamodb:*
                Resource:
                  - !GetAtt ChatsTable.Arn
                  - !Sub
                    - "${Arn}/index/*"
                    - Arn: !GetAtt ChatsTable.Arn
              - Effect: Allow
                Action: dynamodb:*
                Resource:
                  - !GetAtt ImageResponsesTable.Arn
                  - !Sub
                    - "${Arn}/index/*"
                    - Arn: !GetAtt ImageResponsesTable.Arn
              # Allow the lambda function to publish to the SNS Topic
              - Effect: Allow
                Action: sns:Publish
                Resource: !Ref DeadLetterTopic
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaSQSQueueExecutionRole
      Tags:
        - Key: "managed_by"
          Value: "CloudFormation"
        - Key: "Application"
          Value: !Ref AppName
  BackendLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: python3.9
      Role: !GetAtt LambdaIAMRole.Arn
      Handler: lambda_handler.lambda_handler
      Description: !Sub
        - "Lambda Function to Handle the callback of a message for the '${AppName}' application"
        - AppName: !Ref AppName
      Tracing: Active
      Timeout: 300
      MemorySize: 512
      PackageType: Zip
      CodeUri: ./package
      ReservedConcurrentExecutions: 10
      Environment:
        Variables:
          TWILIO_AUTH_TOKEN: !Ref TwilioAuhToken
          TWILIO_ACCOUNT_SID: !Ref TwilioAccountSID
          TWILIO_PHONE_NUMBER: !Ref TwilioPhoneNumber
          OPENAI_API_KEY: !Ref OpenAIAPIKey
          LAMBDA_LOG_LEVEL: !Ref LambdaLogLevel
          APP_NAME: !Ref AppName
          OPENAI_MOBILE_SECRET_KEY: !Ref OpenAIMobileSecretKey
          OPENAI_MOBILE_IMAGE_GENERATION_SIZE: !Ref BotImageGenerationSize
          OPENAI_MOBILE_MAX_SESSION_DURATION_MINUTES: !Ref SessionsExpirationMinutes
          OPENAI_MOBILE_MAX_SESSIONS_PER_DAY: !Ref SessionsQuotaPerUser
          OPENAI_MOBILE_MAX_REQUESTS_PER_SESSION: !Ref MessagesQuotaPerUserSession
          OPENAI_MOBILE_ADMIN_USERS: !Ref AppAdminUsers
          OPENAI_MOBILE_DYNAMODB_TABLES_PREFIX: !Ref AppName
          STRIPE_API_KEY: !Ref StripeApiKey
      # Dead letter queue configuration
      DeadLetterQueue:
        Type: SNS
        TargetArn: !Ref DeadLetterTopic
      EventInvokeConfig:
        MaximumEventAgeInSeconds: 180
        MaximumRetryAttempts: 0
      Tags:
        managed_by: "CloudFormation"
        application: !Ref AppName


Outputs:
  DevApplicationBaseUrl:
    Description: "API Gateway endpoint URL for development stage for the application backend"
    Value: !Sub "https://${DevelopmentBackendApi}.execute-api.${AWS::Region}.amazonaws.com/dev/"
  TwilioEndpointDevUrl:
    Description: |
      Development endpoint URL to use on your Twilio Sandbox for Whatsapp.
      More info at: https://www.twilio.com/docs/whatsapp/sandbox
    Value: !Sub "https://${DevelopmentBackendApi}.execute-api.${AWS::Region}.amazonaws.com/dev/twilio/message"
