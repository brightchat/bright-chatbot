import logging
import os
from typing import Dict, Any

from openai_mobile.client import OpenAIChatClient
from openai_mobile.providers.twilio import TwilioProvider
from openai_mobile.models import MessagePrompt, User

from request_parser import parse_event_body, build_api_callback_url
from dynamo_auth_backend import DynamoSessionAuthBackend

try:
    from aws_xray_sdk.core import patch_all

    patch_all()
except ImportError:
    logging.warn("Optional library aws_xray_sdk not found. Skipping patching.")
    pass


def lambda_handler(event: Dict[str, Any], context) -> Dict[str, Any]:
    """
    Handler that receives a callback from twillio
    containing a message sent by the user and responds
    to it with a response generated by an OpenAI model.
    """
    init_logger()
    if logging.getLogger().level < 30:
        print(f"event:\n{event}")
    record = event["Records"][0]
    # Retrieve the body of the message and parse it:
    parsed_body = parse_event_body(record["body"])
    # Verify signature:
    verify_request_auth(parsed_body)
    # Initiate provider and backend:
    provider = TwilioProvider()
    backend = DynamoSessionAuthBackend()
    # Initiate client
    client = OpenAIChatClient(provider=provider, backend=backend)
    # Create User message prompt:
    message_event = parsed_body["params"]
    user = User(user_id=message_event["From"])
    message_prompt = MessagePrompt(
        body=message_event["Body"],
        from_user=user,
    )
    client.reply(message_prompt)
    return {
        "StatusCode": 200,
    }


def init_logger():
    logging.basicConfig()
    logging.getLogger("openai_mobile").setLevel(
        os.environ.get("LAMBDA_LOG_LEVEL", "WARNING")
    )


def verify_request_auth(parsed_body: Dict[str, Any]):
    """
    Verifies that the request is actually coming from Twillio
    """
    callback_url = build_api_callback_url(parsed_body)
    params = parsed_body["params"]
    headers = parsed_body["headers"]
    signature = headers["X-Twilio-Signature"].replace(" ", "+")
    TwilioProvider().verify_signature(
        callback_url, params, signature, raise_on_failure=True
    )
