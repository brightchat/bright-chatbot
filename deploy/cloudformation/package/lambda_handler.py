import json
import logging
import os
from typing import Any, Dict

from dynamo_auth_backend import DynamoSessionAuthBackend

from openai_mobile.client import OpenAIChatClient
from openai_mobile.models import MessagePrompt, User
from openai_mobile.providers.twilio import TwilioProvider

from request_parser import parse_event_body

try:
    from aws_xray_sdk.core import patch_all

    patch_all()
except ImportError:
    logging.warn("Optional library aws_xray_sdk not found. Skipping patching.")
    pass


def lambda_handler(event: Dict[str, Any], context) -> Dict[str, Any]:
    """
    Handler that receives a callback from twillio
    containing a message sent by the user and responds
    to it with a response generated by an OpenAI model.
    """
    logger = init_logger()
    if logger.level < 30:
        print(f"event:\n{json.dumps(event)}")
    # Parse event body:
    parsed_body = parse_event_body(event)
    # Verify signature:
    verify_request_auth(parsed_body)
    # Initiate provider and backend:
    provider = TwilioProvider()
    backend = DynamoSessionAuthBackend()
    # Initiate client
    client = OpenAIChatClient(provider=provider, backend=backend)
    # Create User message prompt:
    message_event = parsed_body["params"]
    user = User(user_id=message_event["From"])
    message_prompt = MessagePrompt(
        body=message_event["Body"],
        from_user=user,
    )
    client.reply(message_prompt)
    return {
        "StatusCode": 200,
    }


def init_logger() -> logging.Logger:
    logging.basicConfig()
    logger = logging.getLogger("openai_mobile")
    logger.setLevel(os.environ.get("LAMBDA_LOG_LEVEL", "WARNING"))
    return logger


def verify_request_auth(parsed_body: Dict[str, Any]):
    """
    Verifies that the request is actually coming from Twillio
    """
    callback_url = parsed_body["callback_url"]
    params = parsed_body["params"]
    headers = parsed_body["headers"]
    signature = headers["X-Twilio-Signature"]
    TwilioProvider().verify_signature(
        callback_url, params, signature, raise_on_failure=True
    )
